using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;
using System.Windows.Markup;

namespace Schenck.Mas.WPFToolkit.Translation
{
    /// <summary>
    ///     The Translate Markup extension returns a binding to a TranslationData
    ///     that provides a translated resource of the specified key
    /// </summary>
    public class TranslateExtension : MarkupExtension, IValueConverter
    {
        /// <summary>
        ///     Initializes a new instance of the TranslateExtension class.
        /// </summary>
        public TranslateExtension() { }

        /// <summary>
        ///     Initializes a new instance of the TranslateExtension class.
        /// </summary>
        /// <param name="key">The key.</param>
        public TranslateExtension(string key)
        {
            Key = key;
        }

        /// <summary>Gets or sets the key.</summary>
        /// <value>The key.</value>
        [ConstructorArgument("key")]
        public string Key { get; set; }

        /// <summary>
        ///     Gets or sets a prefix for the key.
        /// </summary>
        public string KeyPrefix { get; set; }

        /// <summary>
        ///     Gets or sets a binding to the data context property.
        /// </summary>
        public string BindingExpression { get; set; }

        /// <summary>
        ///     Gets or sets an optional parameter.
        /// </summary>
        public string Parameter { get; set; }

        /// <inheritdoc />
        public override object ProvideValue(IServiceProvider serviceProvider)
        {
            Binding binding = null;
            if (serviceProvider == null)
            {
                throw new ArgumentNullException(nameof(serviceProvider));
            }

            if (!string.IsNullOrEmpty(Key))
            {
                binding = new Binding
                {
                    Mode = BindingMode.OneWay,
                    Source = Key,
                    Converter = this
                };
            }
            else if (!string.IsNullOrEmpty(BindingExpression))
            {
                var valueTarget = serviceProvider.GetService(typeof(IProvideValueTarget)) as IProvideValueTarget;

                if (valueTarget?.TargetObject is FrameworkElement element)
                {
                    binding = new Binding(BindingExpression)
                    {
                        Mode = BindingMode.OneWay,
                        Source = element.DataContext,
                        Converter = this
                    };
                }
            }

            return binding?.ProvideValue(serviceProvider);
        }

        /// <inheritdoc />
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            var searchedKey = $"{KeyPrefix}{value}";
            var localizedString = new LocalizedString(searchedKey, Parameter);

            if (!string.IsNullOrEmpty(BindingExpression))
            {
                // Only use the localized string (and cause a log entry) if the bound value is not an empty string or null
                if (value == null || string.IsNullOrEmpty(value.ToString()))
                {
                    return string.Empty;
                }
                return localizedString;
            }
            // The binding expression is null or empty, so we have a hardcoded string
            // The localized string will cause a log entry when the key is null or an empty string
            return localizedString;
        }

        /// <inheritdoc />
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return value;
        }
    }
}
